input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

type Request @model {
  id: ID!
  name: String!
  title: String!
  description: String!
  date: AWSDateTime!
  location: String
  seniorID: ID! @index(name: "bySeniorID", sortKeyFields: ["id"])
  volunteerID: ID @index(name: "byVolunteerID", sortKeyFields: ["id"])
  status: String! # "open", "accepted", "completed"
  country: String
  locale: String
  seniorFeedback: String
  volunteerFeedback: String
  responses: [Response] @hasMany(indexName: "byRequest", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  picture: String
  pictures: [String] # New field for multiple optional pictures
  rate: Int
  volunteerName: String
  urgent: Boolean # New field to mark the request as urgent or not
  tags: [String] # New field for tags
}

type Response @model {
  id: ID!
  requestID: ID! @index(name: "byRequest", sortKeyFields: ["id"])
  volunteerID: ID! @index(name: "byVolunteerID", sortKeyFields: ["id"])
  message: String
  createdAt: AWSDateTime!
  email: String
  name: String
  x1: String
}

type User @model {
  id: ID!
  username: String!
  birthdate: AWSDate
  phone_number: AWSPhone
  locale: String
  email: AWSEmail
  name: String
  country: String
  picture: AWSURL
  role: String
  description: String
  rating: Int
  counter: Int
  posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  replies: [Reply] @hasMany(indexName: "byUser", fields: ["id"])
}

type Post @model {
  id: ID!
  title: String!
  content: String!
  authorID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  author: User @belongsTo(fields: ["authorID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  pictures: [AWSURL] # New field for multiple optional pictures
  likes: Int
  tags: [String] # New field for tags
  likedBy: [ID] # New field for tracking likes
}

type Comment @model {
  id: ID!
  content: String!
  postID: ID! @index(name: "byPost", sortKeyFields: ["id"])
  post: Post @belongsTo(fields: ["postID"])
  authorID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  author: User @belongsTo(fields: ["authorID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  replies: [Reply] @hasMany(indexName: "byComment", fields: ["id"])
}

type Reply @model {
  id: ID!
  content: String!
  commentID: ID! @index(name: "byComment", sortKeyFields: ["id"])
  comment: Comment @belongsTo(fields: ["commentID"])
  authorID: ID! @index(name: "byUser", sortKeyFields: ["id"])
  author: User @belongsTo(fields: ["authorID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}
